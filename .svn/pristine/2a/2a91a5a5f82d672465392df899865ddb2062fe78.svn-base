//WGS-84 to GCJ-02
 function gcj_encrypt (wgsLat, wgsLon) {


  // Krasovsky 1940
  //
  // a = 6378245.0, 1/f = 298.3
  // b = a * (1 - f)
  // ee = (a^2 - b^2) / a^2;
  var a = 6378245.0; //  a: 卫星椭球坐标投影到平面地图坐标系的投影因子。
  var ee = 0.00669342162296594323; //  ee: 椭球的偏心率。
  //begin 


  var x = wgsLon - 105.0, y = wgsLat - 35.0;
  var dLat = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));
  dLat += (20.0 * Math.sin(6.0 * x * 3.14159265358979324) + 20.0 * Math.sin(2.0 * x * 3.14159265358979324)) * 2.0 / 3.0;
  dLat += (20.0 * Math.sin(y * 3.14159265358979324) + 40.0 * Math.sin(y / 3.0 * 3.14159265358979324)) * 2.0 / 3.0;
  dLat += (160.0 * Math.sin(y / 12.0 * 3.14159265358979324) + 320 * Math.sin(y * 3.14159265358979324 / 30.0)) * 2.0 / 3.0;
  //end
  //begin 

  var x1 = wgsLon - 105.0, y1 = wgsLat - 35.0;
  var dLon = 300.0 + x1 + 2.0 * y1 + 0.1 * x1 * x1 + 0.1 * x1 * y1 + 0.1 * Math.sqrt(Math.abs(x1));
  dLon += (20.0 * Math.sin(6.0 * x1 * 3.14159265358979324) + 20.0 * Math.sin(2.0 * x1 * 3.14159265358979324)) * 2.0 / 3.0;
  dLon += (20.0 * Math.sin(x1 * 3.14159265358979324) + 40.0 * Math.sin(x1 / 3.0 * 3.14159265358979324)) * 2.0 / 3.0;
  dLon += (150.0 * Math.sin(x1 / 12.0 * 3.14159265358979324) + 300.0 * Math.sin(x1 / 30.0 * 3.14159265358979324)) * 2.0 / 3.0;


  //end
  var radLat = wgsLat / 180.0 * 3.14159265358979324;
  var magic = Math.sin(radLat);
  magic = 1 - ee * magic * magic;
  var sqrtMagic = Math.sqrt(magic);
  dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * 3.14159265358979324);
  dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * 3.14159265358979324);


  return { 'lat': wgsLat + dLat, 'lon': wgsLon + dLon };
}


 function distance(la1, lo1, la2, lo2) {

  var La1 = la1 * Math.PI / 180.0;

  var La2 = la2 * Math.PI / 180.0;

  var La3 = La1 - La2;

  var Lb3 = lo1 * Math.PI / 180.0 - lo2 * Math.PI / 180.0;

  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(La3 / 2), 2) + Math.cos(La1) * Math.cos(La2) * Math.pow(Math.sin(Lb3 / 2), 2)));

  s = s * 6378.137;//地球半径

  s = Math.round(s * 10000) / 10000;

  return s;

  console.log("计算结果",s)

}

module.exports = {
  transferToTen: gcj_encrypt,
  getDistance: distance
}